; many XORs followed by splitting the output into chunks
; ARGS: input0=0b01000110101000011011000001100100 input1=0b11010101000100101110010010111101 input2=0b00100001111100000000100001001010 input3=0b11001001100101010011001110111010 input4=0b00101010110101000101011010001010 input5=0b11010000000101001100000111010100 input6=0b11011111011011001011101010000110 input7=0b10000011010101101111110110011100`
1000000
1 sort bitvec 32
2 sort bitvec 64
3 sort bitvec 128
4 sort bitvec 256
5 sort bitvec 512
6 input 1 input0
7 input 1 input1
8 input 1 input2
9 input 1 input3
10 input 1 input4
11 input 1 input5
12 input 1 input6
13 input 1 input7
14 xor 1 13 12
15 xor 1 11 9
16 xor 1 12 12
17 xor 1 6 11
18 xor 1 10 8
19 xor 1 6 10
20 xor 1 6 6
21 xor 1 11 11
22 xor 1 11 11
23 xor 1 6 6
24 xor 1 12 6
25 xor 1 6 13
26 xor 1 10 8
27 xor 1 8 13
28 xor 1 6 7
29 xor 1 11 11
30 xor 1 17 26
31 xor 1 18 29
32 xor 1 18 25
33 xor 1 15 26
34 xor 1 25 19
35 xor 1 29 27
36 xor 1 23 21
37 xor 1 19 26
38 xor 1 20 26
39 xor 1 21 19
40 xor 1 28 15
41 xor 1 26 14
42 xor 1 22 14
43 xor 1 28 21
44 xor 1 22 26
45 xor 1 19 29
46 concat 2 30 31
47 concat 2 32 33
48 concat 2 34 35
49 concat 2 36 37
50 concat 2 38 39
51 concat 2 40 41
52 concat 2 42 43
53 concat 2 44 45
54 concat 3 46 47
55 concat 3 48 49
56 concat 3 50 51
57 concat 3 52 53
58 concat 4 54 55
59 concat 4 56 57
60 concat 5 58 59
61 slice 1 60 31 0
62 slice 1 60 63 32
63 slice 1 60 95 64
64 slice 1 60 127 96
65 slice 1 60 159 128
66 slice 1 60 191 160
67 slice 1 60 223 192
68 slice 1 60 255 224
69 output 61 output0
70 output 62 output1
71 output 63 output2
72 output 64 output3
73 output 65 output4
74 output 66 output5
75 output 67 output6
76 output 68 output7
